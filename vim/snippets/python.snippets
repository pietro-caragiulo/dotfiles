snippet params
	Parameters
	----------

snippet returns
	Returns
	-------

snippet attrs
	Attributes
	----------

snippet see
	See Also
	--------

snippet funcs
	Functions
	---------

snippet class
	Classes
	-------

snippet ex
	Examples
	--------

snippet ref
	References
	----------

snippet cm
	from contextlib import contextmanager
snippet pp
	from pprint import pprint as pp
snippet glob
	from glob import glob
snippet np
	import numpy as np
snippet pd
	import pandas as pd
snippet plt
	import matplotlib.pyplot as plt
snippet mpl
	import matplotlib as mpl
snippet pq
	import quantities as pq
snippet const
	import scipy.constants as const
snippet sio
	from skimage import io
snippet ndimg
	import scipy.ndimage as ndimg
snippet tts
	from traits.api import 
snippet chaco
	from chaco.api import 
snippet enable
	from enable.api import 
snippet enaml
	import enaml
	with enaml.imports():
		from ${1:module} import ${2}
snippet assert_close
	from numpy.testing import assert_array_almost_equal as assert_close
snippet cb
	import cookbook as cb
snippet watch
	import yutils
	with yutils.stopwatch():
snippet deprecate
	from yutils import deprecate
	@deprecate('${1:function to use instead}')
snippet prof
	from yutils.testing import profile
	profile('${1:code to profile}')
snippet memprof
	from memory_profiler import profile
	@profile
snippet qtpdb
	from yutils.testing import qt4_pdb; qt4_pdb()()
snippet stack
	import traceback; traceback.print_stack()
snippet ishell
	import IPython.frontend.terminal.embed as _e; _e.InteractiveShellEmbed()()
snippet wx
	from traits.etsconfig.api import ETSConfig; ETSConfig.toolkit = 'wx'
snippet qt
	from traits.etsconfig.api import ETSConfig; ETSConfig.toolkit = 'qt4'
snippet dec
	def wrapper(func):
		# @functools.wraps(func)
		def wrapped(*args, **kwargs):
			val = func(*args, **kwargs)
			return val
		return wrapped
snippet catch_warnings
	with warnings.catch_warnings():
		warnings.simplefilter("ignore")
snippet utf8
	# -*- coding: utf-8 -*-
snippet copyright
	#------------------------------------------------------------------------------
	#  Copyright (c) 2013, Enthought, Inc.
	#  All rights reserved.
	#------------------------------------------------------------------------------
snippet #-
	#-------------------------------------------------------------------------
snippet #=
	#=========================================================================
snippet here
	import os
	local_dir = os.path.dirname(os.path.abspath(__file__))
snippet ax
	ax = ax if ax is not None else plt.gca()

snippet gallery
	import matplotlib.pyplot as plt; plt.rcdefaults()
	from mpltools import style; style.use('gallery')
snippet todo
	# TODO: 
snippet fix
	# FIXME: 
snippet all
	__all__ = ['${1}']
snippet nptest
	if __name__ == '__main__':
	    np.testing.run_module_suite()
snippet doctest
	if __name__ == '__main__':
	    import doctest
	    doctest.testmod()
snippet argparse
	#!/usr/bin/env python
	"""
	${1:Description}
	"""
	import argparse


	def main():
	    formatter = argparse.ArgumentDefaultsHelpFormatter
	    parser = argparse.ArgumentParser(description=__doc__,
	                                     formatter_class=formatter)
	    parser.add_argument('${2:arg}',
	                        help="${4:help}")
	    parser.add_argument('${5:--kwarg}', default=${6:'value'},
	                        help="${7:help}")

	    args = parser.parse_args()


	if __name__ == '__main__':
	    main()
snippet video
	.. raw:: html

	   <video controls="controls">
		   <source src="${1}.webm" type="video/webm" />
		   Video display requires video tag and webm support.
	   </video>


